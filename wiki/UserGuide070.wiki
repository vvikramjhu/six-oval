#summary User Guide.
#labels Featured

= <font color="#0044CC">Introduction</font> =

This document will assist you in installing and using the SIX OVAL features.


----
= <font color="#0044CC">Object-XML Mapping</font> =

This feature supports marshalling/unmarshalling 
of Java objects.
That is, it is possible to serialize/deserialize 
the domain model objects to/from OVAL XML documents
in a few steps.


Listing 1 shows how to read an OVAL object from an XML file
and write the object to an XML file.

{{{
// Listing 1: Unmarshalling/Marshalling (Local File)

import jp.go.aist.six.oval.core.OvalContext;
import jp.go.aist.six.util.xml.XmlMapper;
.....

XmlMapper  xml_mapper = (new OvalContext()).getXmlMapper();

String  local_src = "definitions.xml";
File  src_file = new File( local_src );
Object  obj1 = xml_mapper.unmarshal( new FileInputStream( src_file ) );
System.out.println( obj1 );
xml_mapper.marshal( obj1, System.out );
}}}


Listing 2 shows how to read an OVAL object from a network resource, i.e. URL.

{{{
// Listing 2: Unmarshalling (Network Resource)

String  network_src = "http://oval.mitre.org/repository/data/DownloadDefinition?"
                     + "id=oval%3aorg.mitre.oval%3adef%3a12541&type=save";
URL  src_url = new URL( network_src );
Object  obj2 = xml_mapper.unmarshal( src_url.openStream() );
System.out.println( obj2 );
}}}


Several variant unmarshal and marshal methods 
are defined in !XmlMapper:
{{{
// Listing 3: XmlMapper interface

Object unmarshal(java.xml.transform.Source source)
Object unmarshal(java.io.Reader reader)
Object unmarshalFromString(java.lang.String xml)

void marshal(Object obj, javax.xml.transform.Result result)
void marshal(Object obj, java.io.OutputStream result)
void marshal(Object obj, java.io.Writer result)
String marshalToString(Object obj)
}}}


----
= <font color="#0044CC">Object Persistence</font> =
T.B.D.

This feature supports persistence of OVAL objects. 
That is, it is possible to save/load the OVAL objects 
to/from a database, and to retrieve objects 
in a programmatic way.

In this version, we use
[http://www.mongodb.org/ MongoDB]
as the database engine.
MongoDB is a kind of document-oriented database or 
NoSQL, so-called.

The reasons why we abandoned relational databases are: 
  * the schema of the OVAL data model is evolving and multiple versions should be co-exist, 
  * the model contains many subclasses derived from the same abstract class to represent platform dependent data, 
  * and the model contains a composit pattern, sometimes called as self-referring structure, of arbitrary repetitions. 


== <font color="#0044CC">Database Setup</font> ==

Before using the object persistence feature, 
you must install the MongoDB and set up the database.
Please refer to the [MongoDB step-by-step guide]
and the official 
[http://www.mongodb.org/display/DOCS/Quickstart MongoDB  Installation Guides].

You may need to run the MongoDB server 
with access control functionality.
In this guide, we assume that the server's _secure mode_ 
is enabled with "--auth" option and
applications need the user name and password
to access the database.
For further details on security settings, 
please read the above step-by-step guide and the official 
[http://www.mongodb.org/display/DOCS/Security+and+Authentication Security and Authentication] document.



== <font color="#0044CC">Java Configuration</font> ==

Several configuration parameters must be set 
to get the right access to the database.
Listing 4 shows the default property values.
Users can override these values to reflect 
the database settings.
This is done with the Java properties file 
named "six-oval.properties".
This file name can't be changed but located in 
any directory in the Java classpath. 
Listing 5 shows example overriding values.


{{{
# Listing 4: Default Java properties

six.oval.repository.datastore.host      =localhost
six.oval.repository.datastore.port      =27017
six.oval.repository.datastore.name      =oval
six.oval.repository.datastore.username  =six
six.oval.repository.datastore.password  =six
}}}

{{{
# Listing 5: Overriding Java properties (six-oval.properties)

six.oval.repository.datastore.name      =ovalrepo
six.oval.repository.datastore.username  =foo
six.oval.repository.datastore.password  =bar
}}}


== CRUD Operations ==

== Queries ==



----
= <font color="#0044CC">RESTful Web Services</font> =
T.B.D.

= <font color="#0044CC">Interpreter Driving</font> =
T.B.D.