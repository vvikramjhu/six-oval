#summary User Guide, version 1.0.0.
#labels Featured,Phase-Implementation

= <font color="#0044CC">Introduction</font> =

This document will assist you in installing and using the SIX OVAL features.


== <font color="#0044CC">Installation</font> ==

Put the SIX OVAL JAR and dependent JAR files
in the Java classpath.
Please consult the [Release_Notes release note] 
for finding the dependent components.


----
= <font color="#0044CC">Object-XML Mapping</font> =

This feature supports marshalling/unmarshalling 
of Java objects.
That is, it is possible to serialize/deserialize 
the OVAL model objects to/from OVAL XML documents
in a few steps.


Listing 1 shows how to build domain model objects 
from an XML input document 
and to generate an XML output document from objects.

{{{
// Listing 1: Unmarshalling/Marshalling (Local File)

import jp.go.aist.six.oval.core.OvalContext;
import jp.go.aist.six.util.xml.XmlMapper;
.....

XmlMapper  xml_mapper = (new OvalContext()).getXmlMapper();

String  local_src = "definitions.xml";
File  src_file = new File( local_src );
Object  obj1 = xml_mapper.unmarshal( new FileInputStream( src_file ) );
System.out.println( obj1 );
xml_mapper.marshal( obj1, System.out );

    /* type-safe method, may throw ClassCastException */
OvalDefinitions  oval_defs1 = xml_mapper.unmarshal( new FileInputStream( src_file ), OvalDefinitions.class );
}}}


Listing 2 shows how to read an XML document 
from a network resource, i.e. URL.

{{{
// Listing 2: Unmarshalling (Network Resource)

String  network_src = "http://oval.mitre.org/repository/data/DownloadDefinition?"
                     + "id=oval%3aorg.mitre.oval%3adef%3a12541&type=save";
URL  src_url = new URL( network_src );
Object  obj2 = xml_mapper.unmarshal( src_url.openStream() );
System.out.println( obj2 );

    /* type-safe method, may throw ClassCastException */
OvalDefinitions  oval_defs2 = xml_mapper.unmarshal( src_url.openStream(), OvalDefinitions.class );
}}}


Several variant unmarshal and marshal methods 
are defined in !XmlMapper.
Listing 3 shows the signatures.

{{{
// Listing 3: XmlMapper interface

Object unmarshal(java.xml.transform.Source source)
Object unmarshal(java.io.Reader reader)
Object unmarshalFromString(java.lang.String xml)

<T> T unmarshal(java.xml.transform.Source source, java.lang.Class<T> type)
<T> T unmarshal(java.io.Reader reader, java.lang.Class<T> type)
<T> T unmarshalFromString(java.lang.String xml, java.lang.Class<T> type)

void marshal(Object obj, javax.xml.transform.Result result)
void marshal(Object obj, java.io.OutputStream result)
void marshal(Object obj, java.io.Writer result)
String marshalToString(Object obj)
}}}


----
= <font color="#0044CC">Repository</font> =

This feature supports persistent storage 
for the OVAL domain model. 
That is, it is possible to save/load the Java objects 
to/from a persistent storage, and to retrieve the objects 
in a programmatic way.

In this version, we use
[http://www.mongodb.org/ MongoDB]
as a the internal storage system.
MongoDB is a kind of document-oriented database or 
NoSQL, so-called.

The reasons why we abandoned relational databases are: 
  * the schema of the OVAL data model is evolving and multiple versions should be co-exist, 
  * the model contains many subclasses derived from the same abstract class to represent platform dependent data, 
  * and the model contains a composit pattern, sometimes called as self-referring structure, of arbitrary repetitions. 


== <font color="#0044CC">Database Setup and Configuration</font> ==

Before using the object persistence feature, 
you must install the MongoDB and set up the database.
Please refer to our [MongoDB step-by-step guide]
and the original 
[http://www.mongodb.org/display/DOCS/Quickstart MongoDB  Installation Guides].

You may need to run the MongoDB server 
with access control functionality.
In this guide, we assume that the server's _secure mode_ 
is enabled with "--auth" option and
applications need the user name and password
to access the database.
For further details on security settings, 
please read the above step-by-step guide and the original
[http://www.mongodb.org/display/DOCS/Security+and+Authentication Security and Authentication] document.


In applications,
several configuration parameters must be set 
to get the right access to the database.
Listing 4 shows the default Java property values.
Users can override these values to reflect 
the database settings.
This is done with the Java properties file 
named "six-oval.properties".
This file name can't be changed but located in 
any directory in the Java classpath. 
Listing 5 shows example overriding values.


{{{
# Listing 4: Default Java properties

six.oval.repository.database.host      =localhost
six.oval.repository.database.port      =27017
six.oval.repository.database.name      =oval
six.oval.repository.database.username  =six
six.oval.repository.database.password  =six
}}}

{{{
# Listing 5: Overriding Java properties (six-oval.properties)

six.oval.repository.database.name      =ovalrepo
six.oval.repository.database.username  =foo
six.oval.repository.database.password  =bar
}}}



== <font color="#0044CC">CRUD Operations</font> ==

!OvalDatabase interface defines 
the low-level persistent storage operations 
for the OVAL Domain Model objects.
Listing 6 shows an example to store and load 
an OVAL Definitions document and the element Definitions.

{{{
// Listing 6: Save and Load Operations

    /* Unmarshal XML document */
XmlMapper  xml_mapper = OvalContext.getXmlMapper();
String  local_src = "src/test/resources/oval_test-content/oval-5.9/def/windows/ind-def_family_test.xml";
File  src_file = new File( local_src );
OvalDefinitions  oval_defs = (OvalDefinitions)xml_mapper.unmarshal( new FileInputStream( src_file ) );

    /* Save OVAL Definition document */
OvalDatabase  db = OvalContext.getDatabase();
String  id = db.save( OvalDefinitions.class, oval_defs );
System.out.println( "whole OVAL Definitions document is saved: id=" + id );

    /* Load Definitions */
for (DefinitionType  def : oval_defs.getDefinitions().getDefinition()) {
    String  def_id = def.getOvalId();
    System.out.println( "finding Definition: id=" + def_id );
    DefinitionType  p_def = db.findById( DefinitionType.class, def_id );
    System.out.println( p_def );
}
}}}



== <font color="#0044CC">Queries</font> ==

Listing 7 shows example queries for the OVAL Database.
Please refer to the [QueryParams070 query parameter specifications] for details.

{{{
// Listing 7: Queries

    /* keyword in "title" or "description" */
DefinitionQueryParams  params04 = new DefinitionQueryParams();
params04.setSearchTerms( "XSS" );
params04.setOrder( "id" );
params04.setCount( "10" );

    /* Definition IDs */
DefinitionQueryParams  params13 = new DefinitionQueryParams();
params13.setId( "oval:org.mitre.oval.test:def:121,oval:org.mitre.oval.test:def:140" );

    /* definition class */
DefinitionQueryParams  params20 = new DefinitionQueryParams();
params20.setDefinitionClass( "compliance" );

    /* affected platforms */
DefinitionQueryParams  params32 = new DefinitionQueryParams();
params32.setPlatform( "Microsoft Windows XP*,Microsoft Windows 7*" );

    /* affected products */
DefinitionQueryParams  params41 = new DefinitionQueryParams();
params41.setProduct( "Mozilla Firefox,Mozilla Thunderbird" );

    /* CVE IDs */
DefinitionQueryParams  params62 = new DefinitionQueryParams();
params62.setCve( "CVE-2011-*,CVE-2010-0176" );

DefinitionQueryParams[]  params_list = new DefinitionQueryParams[] {
    params04, params13, params20, params32, params41, params62
};

    /* Execute Queries */
OvalDatabase  db = OvalContext.getDatabase();
for (DefinitionQueryParams  params : params_list) {
    System.out.println( "searches Definitions: query params=" + params );
    List<DefinitionType>  p_def_list = db.find( DefinitionType.class, params );
    System.out.println( "#Definitions found: " + p_def_list.size() );
    for (DefinitionType  p_def : p_def_list) {
        System.out.println( "result Definition: " + p_def );
    }
}
}}}



== <font color="#0044CC">High-Level Interface</font> ==
T.B.D.


----
= <font color="#0044CC">RESTful Web Services</font> =
T.B.D.

This feature supports Web-based OVAL database services.
That is, it is possible to access remote OVAL database 
via HTTP.


== <font color="#0044CC">Web Application Setup</font> ==

Before using this Web services feature, 
you must set up a servlet container like Tomcat. 
Here, we don't describe how to install it.

Deployment of our Web application is easy;
just put the WAR file on the appropriate path 
indicated by the container.
For example, if you use 
[http://tomcat.apache.org/ Tomcat], 
copy the WAR file to "$CATALINA_BASE/webapps".


If you need to configure the Java properties
to access the database,
please edit the properties file, 
"six-oval.properties" as shown above,
in the application's context; 
e.g. "$CATALINA_BASE/webapps/six-oval/WEB-INF"
in case of Tomcat.


== <font color="#0044CC">API</font> ==

Here, we show some examples.
Please refer to the 
[WebServicesApi070 RESTful Web Services API specifications]
for details.


Figure 1 shows an example call to the API using 
[http://curl.haxx.se/ curl].
Here, a Definition is retrieved using its OVAL ID;
"oval:org.mitre.oval.test:def:165".


  <b>Figure 1</b>: RESTful Web Services invocation using curl.
[http://staff.aist.go.jp/nakamura-akihito/six/oval/version-0_7_0/six-oval-070_ws-get-definition.png]


Listing 8 shows the same service invocation 
from Java code.

{{{
// Listing 8: RESTful Web Services invocation using Java API.

}}}


Listing 9 shows some examples to invoke the API
from Java code.

{{{
// Listing 8: RESTful Web Services API

}}}




= <font color="#0044CC">Interpreter Driving</font> =
T.B.D.

