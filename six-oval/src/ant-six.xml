<?xml version="1.0" encoding="UTF-8"?>

<!-- /////////////////////////////////////////////////////////// -->
<!-- // Ant buildfile                                         // -->
<!-- //                                                       // -->
<!-- // Project SIX: common properties and tasks              // -->
<!-- /////////////////////////////////////////////////////////// -->

<!--
@author     Akihito Nakamura, AIST
@version    $Id$
-->



<!-- %*=+ -->
<project name="six">

    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    <!-- %                                                     % -->
    <!-- %  External Components                                % -->
    <!-- %                                                     % -->
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->




    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    <!-- %                                                     % -->
    <!-- %  Properties                                         % -->
    <!-- %                                                     % -->
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- ******************************************************* -->
    <!-- *  Native directories and files                       * -->
    <!-- ******************************************************* -->

    <property name="lib.dir"            location="${basedir}/lib"/>
    <property name="src.dir"            location="${basedir}/src"/>

    <property name="doc.src.dir"        location="${src.dir}/doc"/>
    <property name="config.src.dir"     location="${src.dir}/config"/>
    <property name="test.src.dir"       location="${src.dir}/test"/>

    <property name="java.src.dir"       location="${src.dir}/main/java"/>
    <property name="java.res.dir"       location="${src.dir}/main/resources"/>

    <property name="java.test.src.dir"  location="${test.src.dir}/java"/>
    <property name="java.test.res.dir"  location="${test.src.dir}/resources"/>


    <!-- ******************************************************* -->
    <!-- *  Project Description                                * -->
    <!-- ******************************************************* -->

    <property file="${src.dir}/project.properties"/>

    <property name="product.id" value="${product.name}-${product.version}"/>



    <!-- ******************************************************* -->
    <!-- *  Platform                                           * -->
    <!-- ******************************************************* -->

    <!-- user-specific environment variables -->
    <property environment="env"/>

    <property file="${src.dir}/build.properties"/>



    <!-- ******************************************************* -->
    <!-- *  Generated Directories, Files, and Artifacts        * -->
    <!-- ******************************************************* -->

    <property name="build.dir"          location="${basedir}/build"/>
    <property name="build.log"          location="${basedir}/build.log"/>

    <property name="build.src.dir"      location="${build.dir}/src"/>
    <property name="build.manifest"     location="${build.dir}/MANIFEST.MF"/>
    <property name="build.codegen.dir"  location="${build.dir}/codegen"/>


    <!-- Java -->
    <property name="build.classes.dir"  location="${build.dir}/classes"/>
    <property name="build.javadoc.dir"  location="${build.dir}/javadoc"/>
    <property name="build.java.codegen.dir"   location="${build.codegen.dir}/java"/>
    <property name="product.jarname"    value="${product.id}.jar"/>
    <property name="product.jar"        location="${build.dir}/${product.jarname}"/>

    <property name="build.java.codegen.dir" location="${build.codegen.dir}/java"/>



    <!-- test -->
    <property name="build.test.dir"     location="${build.dir}/test"/>
    <property name="build.test.report.dir"    location="${build.dir}/test"/>


    <!-- deliverables -->
    <property name="dist.dir"           location="${basedir}/dist"/>
    <property name="dist.dir.current"   location="${dist.dir}/${product.id}"/>
<!--
    <property name="dist.jarname"       value="${product.id}.jar"/>
    <property name="dist.jar"           location="${dist.dir.current}/${product.jarname}"/>
-->
    <property name="dist.src.zipname"   value="${product.id}-src.zip"/>
    <property name="dist.src.zip"       location="${dist.dir.current}/${dist.src.zipname}"/>

    <property name="dist.zipname"       value="${product.id}.zip"/>
    <property name="dist.zip"           location="${dist.dir}/${dist.zipname}"/>




    <!-- ******************************************************* -->
    <!-- *  Library Dependency Settings                        * -->
    <!-- ******************************************************* -->

    <path id="java.lib.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>



    <!-- ******************************************************* -->
    <!-- * Compilation and Execution Settings                  * -->
    <!-- ******************************************************* -->

    <!-- compilation classpath -->
    <path id="java.compile.classpath">
        <path refid="java.lib.classpath"/>
        <pathelement location="${java.res.dir}"/>
        <!-- pathelement location="${config.src.dir}"/ -->
    </path>


    <!-- execution classpath -->
    <path id="java.run.classpath">
        <path refid="java.compile.classpath"/>
        <pathelement location="${build.classes.dir}"/>
    </path>


    <!-- compiler options -->
    <property name="java.compile.source"         value="1.6"/>
    <property name="java.compile.target"         value="1.6"/>
    <property name="java.compile.debug"          value="true"/>
    <property name="java.compile.debuglevel"     value="lines,vars,source"/>
    <property name="java.compile.deprecation"    value="true"/>
    <!--
    <property name="java.compile.optimize"       value="true"/>
    -->


    <!-- pattern for source files -->
    <patternset id="java.source.files">
        <include name="**/*.java" />
    </patternset>

    <patternset id="java.resource.files">
        <exclude name="**/package.html"/>
        <!-- include name="**/*.html"/ -->
        <include name="**/*.properties" />
        <include name="**/*.xml" />
        <include name="**/*.xsl" />
        <include name="**/*.xsd" />
    </patternset>

    <property name="java.resource.files.excludes"
        value="**/log4j*.properties,**/log4j*.xml,**/castor.properties"/>




    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    <!-- %                                                     % -->
    <!-- %  MACRO                                              % -->
    <!-- %                                                     % -->
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- Executes MySQL dump command. -->
    <macrodef name="mysqldump" uri="http://aist.go.jp/six">
        <attribute name="file"/>
        <attribute name="tables"/>
        <attribute name="errorproperty" default="sqldump.error"/>
        <attribute name="resultproperty" default="sqldump.result"/>

        <sequential>
            <echo message="file=@{file}" level="debug"/>
            <echo message="tables=@{tables}" level="debug"/>

            <!-- Don't put a space between '-p' and the password!!! -->
            <exec executable="mysqldump" vmlauncher="false" output="@{file}"
                errorproperty="@{errorproperty}"
                resultproperty="@{resultproperty}"
                >
                <arg line="-u${six.db.username} -p${six.db.password} ${six.db.database} @{tables}"/>
            </exec>
        </sequential>
    </macrodef>



    <!-- Executes SQL script. -->
    <presetdef name="execsql" uri="http://aist.go.jp/six">
        <sql
            classpathref    ="java.run.classpath"
            driver          ="${six.db.driver}"
            url             ="${six.db.url}"
            userid          ="${six.db.username}"
            password        ="${six.db.password}"
            print           ="true"
            autocommit      ="true"
            onerror         ="abort"
            >
        </sql>
    </presetdef>




    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    <!-- %                                                     % -->
    <!-- %  Target                                             % -->
    <!-- %                                                     % -->
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- ******************************************************* -->
    <!-- *  Public Targets                                     * -->
    <!-- ******************************************************* -->

    <target name="default" depends="compile"/>


    <target name="rebuild" depends="clean,compile"/>


    <target name="clean"
        description="Deletes all previous build artifacts">

        <delete dir="${build.dir}"/>
    </target>


    <target name="test" depends=""/>


    <target name="dist" depends="clean,jar,docs,src"
        description="Creates all artifacts for distribution">

        <mkdir dir="${dist.dir.current}"/>

        <copy file="${product.jar}" todir="${dist.dir.current}">
        </copy>

        <copy todir="${dist.dir.current}/javadoc">
            <fileset dir="${build.javadoc.dir}" />
        </copy>

        <zip destfile="${dist.src.zip}"
            >
            <fileset dir="${build.dir}" includes="src/**"/>
            <fileset dir="${basedir}"   includes="build.xml,ant-six.xml,*.properties"/>
        </zip>

        <copy todir="${dist.dir.current}">
            <fileset dir="${doc.src.dir}" />
        </copy>

        <zip destfile="${dist.zip}"
             basedir ="${dist.dir}"
             includes="${product.id}/**"
            />
        <checksum file="${dist.zip}"/>

    </target>



    <!-- ******************************************************* -->
    <!-- * Private Targets                                     * -->
    <!-- ******************************************************* -->

    <!-- ======================================================= -->
    <!-- =  Generating Delivarables                            = -->
    <!-- ======================================================= -->

    <!-- jar: test code -->
<!--
    <target name="jar.test" depends="test.compile,manifest">
        <jar
            destfile    ="${product.test.jar}"
            basedir     ="${build.classes.dir}"
            includes    ="jp/go/aist/six/test/**"
            index       ="true"
            manifest    ="${build.manifest}"
            />
    </target>
-->

    <!-- source code: -->
    <target name="src" depends="java.src">
        <mkdir dir="${build.src.dir}"/>
<!--
        <echo message="filter: product.title = ${product.title}"/>
        <echo message="filter: product.vendor = ${product.vendor}"/>
        <echo message="filter: product.copyright-year = ${product.copyright-year}"/>
        <echo message="filter: product.registration-number = ${product.registration-number}"/>
-->
        <copy todir="${build.src.dir}">
            <fileset dir="${src.dir}"
                includes="build.xml,ant-six.xml,build.properties,project.properties">
                <include name="config/**"/>
                <include name="sql/**"/>
                <include name="webapp/**"/>
            </fileset>
        </copy>
    </target>


    <!-- source code: Java -->
    <target name="java.src" depends="compile">
        <mkdir dir="${build.src.dir}/java"/>

        <!-- copies source files -->
        <copy todir="${build.src.dir}/java">
            <fileset dir="${java.src.dir}" excludes="${java.resource.files.excludes}">
                <patternset refid="java.source.files" />
                <patternset refid="java.resource.files" />
            </fileset>

            <!-- TODO: rename the tokens -->
            <filterset>
                <filter token="product.title"   value="${product.title}"/>
                <filter token="product.vendor"  value="${product.vendor}"/>
                <filter token="product.copyright-year" value="${product.copyright-year}"/>
                <filter token="product.registration-number"
                                                value="${product.registration-number}"/>

                <filter token="ProductName"   value="${product.title}"/>
                <filter token="CopyrightYear"
                                                value="${product.copyright-year}"/>
                <filter token="AISTRegistrationNumber"
                                                value="${product.registration-number}"/>
            </filterset>
        </copy>
    </target>


    <!-- jar -->
    <target name="jar" depends="compile,manifest">

    	<jar destfile="${product.jar}" index="true" manifest="${build.manifest}">
    		<fileset dir="${build.classes.dir}"
                     excludes="${java.resource.files.excludes},*.xml,*.properties,jp/go/aist/six/test/**"
    		/>
            <fileset dir="${java.res.dir}"
                     excludes="*.*"
            />
        </jar>
    </target>
<!-- BACKUP
    <target name="jar" depends="compile,manifest">
        <copy todir="${build.classes.dir}">
            <fileset dir="${java.res.dir}">
                <patternset refid="java.resource.files" />
            </fileset>
        </copy>

        <jar
            destfile    ="${product.jar}"
            basedir     ="${build.classes.dir}"
            excludes    ="${java.resource.files.excludes},*.xml,*.properties,jp/go/aist/six/test/**"
            index       ="true"
            manifest    ="${build.manifest}"
            />
    </target>
-->

    <!-- manifest -->
    <target name="manifest" depends="init">
        <manifest file="${build.manifest}">
            <attribute name="Built-On" value="${timestamp.isoformat}"/>
            <attribute name="Specification-Title"       value="${product.title}"/>
            <attribute name="Specification-Version"     value="${product.version}"/>
            <attribute name="Specification-Vendor"      value="${product.vendor.abbreviation}"/>
            <attribute name="Implementation-Title"      value="${product.title}"/>
            <attribute name="Implementation-Version"    value="${product.version}"/>
            <attribute name="Implementation-Vendor"     value="${product.vendor.abbreviation}"/>
        </manifest>
    </target>



    <!-- ======================================================= -->
    <!-- =  Compilation and API Documentation                  = -->
    <!-- ======================================================= -->

    <!-- docs: all -->
    <target name="docs" depends="java.docs"
        description="Generates all documents"/>


    <!-- docs: Java -->
    <target name="java.docs" depends="compile"
        description="Builds the Javadoc API documents">

        <mkdir dir="${build.javadoc.dir}"/>

        <javadoc 
            sourcepath      ="${java.src.dir}"
            destdir         ="${build.javadoc.dir}"
            classpathref    ="java.compile.classpath"
            packagenames    ="*"
            author          ="true"
            version         ="true"
            use             ="true"
            protected       ="true"
            locale          ="en_US"
            docencoding     ="UTF-8"
            windowtitle     ="${product.title} ${product.version}"
            doctitle        ="${product.title} ${product.version} API Specification"
            />
    </target>



    <!-- compile: test code -->
    <target name="test.compile" depends="java.test.compile,compile,init">
    </target>


    <!-- compile: Java test code -->
    <target name="java.test.compile" depends="compile,init">
        <echo>debug level=${java.compile.debuglevel}</echo>
        <echo>compile target=${java.compile.target}</echo>

        <mkdir dir="${build.classes.dir}"/>

        <javac
            srcdir          ="${java.test.src.dir}"
            classpathref    ="java.compile.classpath"
            destdir         ="${build.classes.dir}"
            source          ="${java.compile.source}"
            target          ="${java.compile.target}"
            debug           ="${java.compile.debug}"
            debuglevel      ="${java.compile.debuglevel}"
            includeantruntime="false"
            >
            <!-- deprecation     ="${java.compile.deprecation}" -->
        </javac>

        <!-- copies resource files -->
        <copy todir="${build.classes.dir}">
            <fileset dir="${java.test.src.dir}">
                <patternset refid="java.resource.files" />
            </fileset>
        </copy>
    </target>



    <!-- compile: -->
    <target name="compile" depends="java.compile,init">
    </target>


    <!-- compile: Java -->
    <target name="java.compile" depends="pre-compile,init">
        <echo>debug level=${java.compile.debuglevel}</echo>
        <echo>compile target=${java.compile.target}</echo>

        <mkdir dir="${build.classes.dir}"/>

        <javac
            srcdir          ="${java.src.dir}"
            classpathref    ="java.compile.classpath"
            destdir         ="${build.classes.dir}"
            source          ="${java.compile.source}"
            target          ="${java.compile.target}"
            debug           ="${java.compile.debug}"
            debuglevel      ="${java.compile.debuglevel}"
            includeantruntime="false"
            >
            <!-- deprecation     ="${java.compile.deprecation}" -->
            <!-- shows unchecked conversion warnings -->
            <!-- <compilerarg line="-Xlint:unchecked"/> -->
        </javac>

        <!-- copies resource files -->
        <copy todir="${build.classes.dir}">
            <fileset dir="${java.src.dir}">
                <patternset refid="java.resource.files" />
            </fileset>
<!--
            <filterset>
                <filter token="six.db.engine"   value="${six.db.engine}"/>
                <filter token="six.db.driver"   value="${six.db.driver}"/>
                <filter token="six.db.database" value="${six.db.database}"/>
                <filter token="six.db.url"      value="${six.db.url}"/>
                <filter token="six.db.username" value="${six.db.username}"/>
                <filter token="six.db.password" value="${six.db.password}"/>
            </filterset>
-->
        </copy>
    </target>

    
    <!-- pre-compile: e.g. code generation -->
    <target name="pre-compile" depends="init">
        <!-- default: do nothing --> 
    </target>
    
    
    

    <!-- ======================================================= -->
    <!-- =  Initialization                                     = -->
    <!-- ======================================================= -->

    <target name="init">
        <tstamp>
            <format property="timestamp.isoformat" pattern="yyyy-MM-dd'T'HH:mm:ssZ"
                locale="en"/>
        </tstamp>

        <mkdir dir="${build.dir}"/>

        <!-- log file (update) -->
        <record name="${build.log}" loglevel="verbose" />

        <echo message="////////////////////////////////////////////////////////////"/>
        <echo message="//   building ${product.title}, version ${product.version}"/>
        <echo message="//"/>
        <echo message="//   date/time: ${timestamp.isoformat}"/>
        <echo message="//   buildfile: ${ant.file}"/>
        <echo message="//    base dir: ${basedir}"/>
        <echo message="////////////////////////////////////////////////////////////"/>

<!--
        <mkdir dir="${build.classes.dir}"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${java.src.dir}">
                <patternset refid="java.resource.files" />
            </fileset>
        </copy>
-->
    </target>




</project>

<!-- vim:set tabstop=4:set expandtab:set shiftwidth=4: -->

